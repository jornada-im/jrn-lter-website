======================
Drylands2 Model Manual
======================

:subtitle: Jornada Basin LTER, New Mexico State University
:organization: Jornada Basin LTER, New Mexico State University
:contact: https://github.com/jornada-im/Drylands2

.. This is a reStructuredText document.
   Convert to HTML or PDF or LaTeX or ODT with pandoc or sphinx.

.. Section heading marks:
        chapter           ===
        section level 1   ---
        section level 2   ```
        section level 3   ^^^
        section level 4   ~~~


.. |nbsp| unicode:: 0xA0
   :trim:

.. 
  .. contents::
     :depth: 4


Introduction
============

The Drylands2 Model simulates vegetation development within an arid to
semiarid landscape. Drylands2 is derived from the model of Rietkirk et al
(1997, 2002)[4_][5_], as originally implemented by Niall Hanan and Matthew
Biesecker.
Further model development and documentation was done by Thomas E. Hilinski
with discussion and assistance from Niall Hanan, Gregory Maurer and others
associated with the Jornada LTER program at New Mexico State University.

The model is implemented in *GNU Octave* language, with intention to be
compatible with *MATLAB*:sup:`TM`, however compatibility has not yet been
tested.

New algorithms beyond the original model include:

* **Version 1** provides three soil layers for soil resources and distribution of
  root biomass.
* Existing algorithms were modified to use a layered soil profile.
* Growth follows a logistic equation, limited by soil water and temperature.
* Field capacity and wilting point constrain soil water infiltration, uptake
  and losses.
* Evaporation from the surface soil layer.
* New classes manage plant aboveground and root biomass calculations.
* **Version 2** includes the ability to have multiple plant species with resource
  competition.
* **Version 3** adds nitrogen atmospheric deposition and plant N uptake.
* Version 4 has a new biomass mortality algorithm based upon stress due to
  insufficient plant-available soil water over a fixed time period.
* **Version 5** has a new algorithm for N maintenance uptake.
  Also has a new output option for matrix time series output containing spatial changes.
  Finally, several functions and classes that are not model-specific have been
  moved into the DrylandsLib package.
* **Version 6** adds a new aeolian submodel for effects upon plant mortality due to
  aeolian erosion and deposition. The model configuration has new sections to
  configure this submodel, and for plants, their response to aeolian stress.

A configuration file in JSON format controls the simulation.
Input is daily precipitation, temperature, N atmospheric deposition, and
wind data from CSV files.
Output options include map images at specified times, netCDF grid time
series, and grid-average time series for state variables saved to a CSV file.
Additional tools provide the ability to run simulations from a console
command-line, and convenience functions to examine simulation results.

Conventions
------------

Directory paths shown herein use a slash (**/**) path separator,
which is the convention in UNIX-style directory specification.
Microsoft Windows uses the backslash (**\\**) separator in paths.
Apple macOS (or OS X) also uses the **/** separator.
*GNU Octave* seems to accept the native separator on which it is running,
in most instances.
R requires a double-backslash on Microsoft Windows when a path is a
string variable.

File line-end characters vary with operating system.
UNIX-style systems (including Linux and Apple macOS) use LF.
Microsoft Windows uses CR+LF.
The files for this model as provided from the git repository
use LF. Some text editors on Microsoft Windows may be confused
by this, including older versions of Notepad.
*GNU Octave* is happy with LF line-endings.



Obtaining and Installing the Drylands2 Model
=============================================

There are two items to download for the Drylands2 model,
the DrylandsLib package, and the Drylands2 model source code
and documentation.


Downloading the Model Source Code
----------------------------------

The model source code and documentation is hosted on GitHub:sup:`TM` at

::

    https://github.com/jornada-im/Drylands2

To get most recent model code, use the button labeled **<> Code**
located near the upper right corner of the page.
From its dropdown menu, select the method you want to use to
download the model code tree.
Alternatively, to get a specific version of the files,
select a **tag** or a **Release**,
which you can find on the right side of the page.

If you want to see the changes made to various versions (**tags**),
select **commits** from the right side of the header for the
list of directories and files.


Installing
----------

Create two directories (substitute your actual paths for these place holders):

|    ``installation-path -`` Put the model files here.
|    ``simulation-path   -`` Simulation configuration and results here.

We recommend naming the installation directory for the model:
``Drylands2``. In this document, the full path to this directory
is referred to as ``[installation-path]/Drylands2``.

Under your ``simulation-path`` consider creating a subdirectory
to hold the simulation results. You will specify this path in
the configuration file item **output.path**.

After installing successfully, you can view information about the model
with the console command::

    octave [installation-path]/Drylands2/src/tools/info.m


Obtaining and Installing the DrylandsLib package
--------------------------------------------------

The DrylandsLib package for *GNU Octave* is required for the Drylands2
model. You can download the latest version of this package from the
following GitHub:sup:`TM` URL:

|    https://github.com/jornada-im/DrylandsModels-utils

The file to download is ``DrylandsLib.tar.gz``. Save this to a
convenient temporary storage directory.

Once downloaded, install the package in *GNU Octave* using the
package manager **pkg**:

|    ``pkg install "DrylandsLib.tar.gz"``

You can prepend the path to file to the file name.

Once installed, *GNU Octave* will know the package by its lowercase name,
``drylandslib``.

In *GNU Octave*, load the package (using its lowercase name):

|    ``warning('off', 'Octave:shadowed-function');``
|    ``pkg load drylandslib``

To view the classes and functions contained in the package,
display a help page with:

|    ``page_screen_output(true)``
|    ``help DrylandsLib``

The Drylands2 model loads the package when it runs, so you do not need
to load it manually.



Additional Software
-------------------

**GNU Octave** can be obtained from `octave.org <https://octave.org>`_.
**MATLAB**:sup:`TM` is a commercial application; see
`<https://www.mathworks.com>`_.

A few software applications are useful for configuration tasks and
examining the simulation results. These include:

* A text editor (not a word processor) for editing configuration files.

* The R Project for Statistical Computing:
  (`<https://www.r-project.org>`_).
  This allows you to use some of the provided utilities to examine
  simulation results, including graphs and maps.

* A PDF file viewer, such as
  **Okular** (`<https://okular.kde.org>`_) or
  **Adobe Acrobat Reader**:sup:`TM` (`<https://get.adobe.com/reader>`_).

* **Pandoc** is used for producing documents in HTML and PDF format from
  Markdown and reStructuredText document files.
  See `<https://pandoc.org>`_.
  A separate **LaTeX** installation may be required for producing PDF files.
  Without Pandoc, documents are still readable as plain text.

* **GNU make** is used to generated formatted document files.

* **git** is used for version control.
  This is not required to obtain and run the model,
  but is used to manage source code history and updates.

* **plantuml** (`<https://plantuml.com>`_) generates class and flowchart
  diagrams from text description files.


File Organization
-----------------

The directory structure for the model files is::

    Drylands2
    |-- doc         - Model documentation files.
    |-- src         - Model algorithms and control functions and classes.
    |   |-- input   - Functions and classes for reading input files.
    |   |-- output  -   ... for writing non-graphics output files.
    |   |-- plot    -   ... for displaying and saving graphs and maps.
    |   |-- grid        ... for grid initialization and management.
    |   |-- log     -   ... for writing to a log file.
    |   |-- math    - Math and statistics functions.
        |-- aeolian - Algorithms for plant effects from aeolian erosion and deposition.
    |   |-- mounds  - Modeling water flow downgradient on topographic mounds.
    |   |-- tools   - Misc. usesful functions not used in a simulation.
    |   `-- util    - General utility functions.
    `-- tests       - Test and example files.



Making the Documents
---------------------

In a console window, change to the document's directory,
e.g., ``[installation-path]/Drylands2/doc``.
Then run **make** to build the formatted documents.
These files will have the extensions ``pdf`` and ``html``.

To remove the formatted documents, run **make clean**.

The **make** scripts expect the **Pandoc** program to be available
in the executable search paths (usually specified in the operating
system's PATH environment variable.)



Quick Start
===========

Make a work directory in which to store your simulation files. Under the
work directory create a subdirectory to hold the simulation results. You
will specify this subdirectory in the configuration file item **output**.
Useful names for the output subdirectory include ``results`` or ``output``.
Each simulation will create an subdirectory under the output directory
with the name **about:location** configuration item, and the start date
and time appended.

Make a configuration file.
Copy a test configuration file ``tests/config.json``
from the Drylands2 model directory
into your work directory, and rename to something unique
and significant, e.g., ``config-C-SAND.json``.
Edit the file with a text file editor to customize the configuration.
There are comments in the configuration file describing each item.
See additional information in the section " `Configuring a Simulation`_ ".

After starting *GNU Octave*, specify the directory where
the source code for the models is:

.. code:: MATLAB

    addpath( '[installation-path]/src' );

Run the model with the following command:

.. code:: MATLAB

   Drylands2( configurationFile )

where ``configurationFile`` is a string containing the path and file name
of the configuration file.

For example:

.. code:: MATLAB

    addpath( '[installation-path]/src' );
    % if the configuration file is in your current directory:
    Drylands2( 'config.json' )

Alternatively you can use the **runsim** script provided with the Drylands2
model files. From the command line:

.. code::

    cd <directory containing your configuration file>
    octave <path to model>/src/tools/runsim.m [configuration file]
    # Example:  octave ~/models/Drylands2/src/tools/runsim.m config-G-IBPE.json

If running additional simulations in the same *GNU Octave* session,
enter the command ``clear all`` before starting the next simulation.



Configuring a Simulation
========================

A configuration file is a text file using JSON[1_] format and structures.

An example configuration file is provided in the model code at
``tests/config.json``. You can copy this into your workspace and edit it for
your simulation.

Although the configuration data in the configuration file
is in JSON format, the line comments in the file are not allowed in standard
JSON file syntax. These lines are removed before the JSON data is processed.
You can add your own line comments to your file; lines where the first
non-blank character is **#** are removed.

Configuration information is read using the function **readConfigJSON**.


General Configuration
---------------------

Input file names can include a partial or complete path.
If no path is included, the file is assumed to be located in the same
directory as the configuration file.
If a partial path is given, then that path is assumed to be a subdirectory
of the configuration file's path.

========================= ================  ============================================================================
Configuration Item        Data Type         Description
========================= ================  ============================================================================
about                     struct            About the simulation: location (site name), latitude, longitude.
grid                      struct            Number of rows and columns of the square simulation grid
input                     struct            Input data sources; see " `Input Data Configuration`_ ".
output                    struct            Output path for results and plots, and output configuration.
\                         \                 ; see `Output Configuration`_.
simTime                   scalar            Simulation time; see " `Simulation Time`_ ".
========================= ================  ============================================================================


Simulation Time
---------------------

The configuration item **simTime** specifies the simulation time limits.
These limits are two pairs of integers containing a year and day-of-year.
The first pair is the **start** date, and the 2nd pair is the **stop** date.

Coordination of the simulation time limits with the input data files
is not automatic. You must be sure that the data files span your
time limits.

You can get the day of year from the date using the function **datenum**.
For example, if your start year is 2013 Aug 6, then

    datenum(2013,8,6) - datenum(2013,1,1) + 1      % ans = 218


Input Data Configuration
-------------------------

The configuration item **input** describes the sources of input data.
If the item is a data file name, see the section " `Input Data`_ " for a
description of the details of the file structure.

===================== ================  ================================================================================
Configuration Item    Data Type         Description
===================== ================  ================================================================================
precipitation         string or scalar  Daily precipitation data.
\                     \                 Specify a file name, or a constant value (mm/day).
temperature           string or scalar  Daily temperature data.
\                     \                 Specify a file name, or a constant value (degrees C).
NAtmDep               string or scalar  Daily total wet+dry N atmospheric deposition.
\                     \                 Specify a file name, or a constant value (g/m2/day)
wind                  string or         Either
\                     1x3 matrix        **Wind data file name** - CSV file contains daily data:
\                     \                 direction (degrees clockwise from north), mean and maximum wind speeds (m/s).
\                     \                 **Vector** containing constant direction, mean and maximum speeds,
\                     \                 e.g., ``[270.0, 3.0, 14.0]``
===================== ================  ================================================================================


Output Configuration
---------------------

The configuration item **output** has the following values and
boolean switches (**true** = produce graph, **false** = do not produce graph).

========================= =========  ============================================================================
Configuration Item        Data Type  Description
========================= =========  ============================================================================
path                      string     Directory path to contain output files.
\                         \          This path can be absolute or relative to the configuration file.
saveResults               logical    Save final results to a "mat" file (true or false).
gridAvgTimeSeries         logical    Write grid-average time series of pools to a CSV file (true or false).
**mapTS**                 struct     Items to create map time series output.
\                         \          Values can be *false* (or zero), or the day number of the year at which
\                         \          output will be generated. Valid day numbers are in the range 1-365.
\                         \          The items are:
biomass                   --         Generate a netCDF[6_] map time series grids for biomass for each species.
\                         \          Value is boolean "false" or a positive integer in the range 1-365.
resources                 --         Generate a netCDF[6_] map time series grids for each resource.
\                         \          Value is boolean "false" or a positive integer in the range 1-365.
spatialChanges            logical    Generate time series grids for annual changes in resources and biomass.
\                         \          Grids are saved in an MAT file (a *GNU Octave* file format).
========================= =========  ============================================================================


Graphs Configuration
---------------------

The configuration item **graphs** has the following values and
boolean switches (**true** = produce graph, **false** = do not produce graph).

=========================  =========  =========================================================================
Configuration Item         Data Type  Description
=========================  =========  =========================================================================
doSweepGraph               logical    Sweep graph: available only when sweep.runType == 0;
\                          \          produced after the simulation end.
doResultsMaps              logical    Maps of results; one page of biomass, soil water and surface water
\                          \          written to PNG files. These maps follow the ``mapSchedule`` item.
mapSchedule                vector     Schedule for maps: used if doResultsMaps == true.
\                          \          Enter a vector of time numbers and/or strings.
\                          \          Schedule times can be a day number (> zero && <= simTime),
\                          \          or a string from ["first", "last", "annual", "decadal"].
\                          \          Example: ["first", 365, "last"]
\                          \          Example: [1, 100, 200, "annual"]
mapOriginAtTop             logical    Is the origin of maps at top-left? If false, is at lower-left.
destination                string     Should graphs and maps be displayed or written to a file?
\                          \          Choices:
\                          \          "display" - to a window on the screen
\                          \          "png"     - save graph in a PNG file
=========================  =========  =========================================================================


Plant Species Definitions
--------------------------

The configuration item **plant** contains an array of structs which
define the plant species. Each struct in the array is one species definition,
and contains these fields:

=================== ===========  =======================================================================================
Configuration Item  Data Type    Description
=================== ===========  =======================================================================================
name                string       Name of plant species.
type                scalar       Type of plant: 1 = grass, 2 = shrub
rmax                scalar       Limiting growth rate (maximum daily new biomass as fraction of current biomass);
\                   \            valid range 0-1. E.g., An estimate is maximum annual GPP / 365.
Bmax                scalar       Maximum biomass (g/m2).
gmax                scalar       Plant water uptake: maximum specific water uptake (mm g-1 m-2 d-1).
\                   \            Proportional to 1/(Water maintenance); from Stewart table 4, grass.
\                   \            Units: Rietkirk 1997 = (g g-1) d-1; Rietkirk 2002 = mm d-1 m2 g-1.
k1                  scalar       Plant water uptake: half-saturation constant of plant growth and water uptake (mm).
c                   scalar       Plant growth: Rate of water conversion to new biomass (g m-2 mm-1),
\                   \            aka, water-use efficiency.
\                   \            Units: Rietkirk 1997 = g g-1 d-1; Rietkirk 2002 = g mm-1 m-2.
DP                  scalar       Plant growth: diffusion: lateral dispersal and propagation (m2 d-1).
\                   \            Valid range is 0-1.
bmBgAgRatio         scalar       Ratio of belowground to aboveground biomass.
bmBgDist            1x3 matrix   Belowground biomass distribution; fraction into each soil layer (sum to 1.0).
bmThreshold         scalar       Minimum biomass fraction (< 1.0) for cell to be considered vegetated.
teff                4x1 matrix   Parameters to gpdf for temperature effect on growth:
\                   \            1 = Optimum temperature for production; the peak of the curve.
\                   \            2 = Maximum temperature for production.
\                   \            3 = Spread of the bell curve; smaller values = broader bell shape.
\                   \            4 = Left curve shape; smaller values = more production at lower temperatures.
k2                  scalar       Infiltration: Rate at which infiltration increases with plant density (g m-2).
CN                  scalar       Nitrogen: Average aboveground C:N of biomass for this plant (gC/gN).
cNmax               scalar       Nitrogen: Maximum daily N uptake as fraction of plant biomass; valid range = 0-1.
\                   \            Typically cNmax = (c*gmax)/C:N. Units = gN gC-1 d-1.
maintN              scalar       Nitrogen daily maintenance requirement (gN gBiomass-1 d-1).
**mortality**       struct       **Mortality configuration:**
d                   scalar       Background rate: specific loss of plant density due to mortality (fraction d-1).
B0                  scalar       Water demand excess at the logistic function inflection point (range: >= 0.0).
\                   \            Increasing values at a fixed water demand excess will decrease the mortality rate,
\                   \            while the maximum rate of change of mortality remains constant.
B1                  scalar       Maximum rate of change of mortality (range: >= 0.0).
\                   \            This is the maximum slope at the inflection point of the logistic function.
\                   \            Increasing values increase the rate of change in mortality at the logistic inflection
\                   \            point, and at a fixed water demand excess will increase the mortality rate.
lengthPeriod        scalar       Number of days to track excess water demand.
**aeolianEffect**   struct       **Aeolian effects from biomass upon erosion/deposition.**
\                   \            This struct will have different fields and values for a grass or shrub:
*Grass:*            \            \
minThreshold        scalar       Minimum aboveground biomass to be included in aeolian calculations (g/m2).
B, Bmax, Bz         scalar       ``grassEffect`` equation parameters. E.g., B: 0.12, Bmax: 0.99, Bz: 1000.0
*Shrub:*            \            \
minThreshold        scalar       Minimum aboveground biomass to be included in aeolian calculations (g/m2).
=================== ===========  =======================================================================================


Model Configuration
---------------------

The configuration item **model** contains an array of structs which
specify the model configuration. There are four sub-structs:
**initial**, **params**, **aeolian**, and **mounds**.

Mounds are topographic features of specified shape and size.
Surface water flows down the mounds according to their shape and the
parameter **beta**, or maximum convection rate.

====================== ===========  ========================================================================================
Configuration Item     Data Type    Description
====================== ===========  ========================================================================================
**initial**            \            **Initial state settings:**
*biomass*              \            **Initial biomass configuration - array; entry for each plant species:**
distribution           scalar       \ integer: 0 = constant with noise; 1 = uniform random fraction; 2 = N random cells
configRandom           vector       \ Zero or 3 elements: For distribution 2 (N random values), contains:
\                      \            \ - configRandom(1) = number of random cells wanted;
\                      \            \ - configRandom(2) = minimum distance from the grid edge (m);
\                      \            \ - configRandom(3) = minimum distance from other cells (m).
agLive                 1x2 matrix   \ Initial aboveground live biomass per cell (g m-2) of each species per cell.
*other items*          \            \
precipitation          scalar       Amount of rainfall (mm) for initialization.
\                      \            The water will be applied to surface soil water content at the simulation start.
soilN                  scalar       Amount of plant-available N in the entire soil profile depth (g N m-2).
\                      \            The amount will be distributed with constant density in each soil layer.
**params**             \            **Equation parameter values:**
alpha                  scalar       Infiltration: Proportion of surface water available for infiltration (d-1).
Wo                     scalar       Infiltration: Minimum infiltration in the absence of plants (unitless).
rW                     scalar       Soil Water: specific soil water loss due to drainage (d-1).
DW                     scalar       Soil Water: diffusion coefficient for soil water. Valid range is 0-1. (m2 d-1)
DS                     scalar       Surface Water: diffusion coefficient for surface water (DO in Rietkirk (2002) and
\                      \            (HilleRisLambers et al. 2001). Valid range is 0-1. (m2 d-1)
Epot                   string       Evaporation: Daily potential evaporation; an equation.
\                      \            Provide a string containing anonymous function for equation in GNU Octave/MATLAB form.
\                      \            Example: ``"@(T) (0.392 * T - 0.837)^2"``
E0                     scalar       Evaporation: Minimum daily potential evaporation under the plant canopy.
b                      scalar       Evaporation: Changes the relative lengths of the minimum and maximum asymptotes;
\                      \            b > **e** increases the length of the minimum asymptote.
c                      scalar       Evaporation: Displacement of the inflection point along the x-axis;
\                      \            smaller values shift left.
Emr                    scalar       Evaporation: Slope at inflection point; proportional to the maximum change in
\                      \            evaporation with biomass. E.g., ``Emr = K * (Epot - E0) / Bmax``
**aeolian**            \            **Aeolian submodel configuration:**
maxDailyFlux           scalar       Maximum daily aeolian sediment flux (g/m/day).
\                      \            E.g., from From Alvarez et al (2012), figure 8b, or
\                      \            Bergametti & Gillette (2010), table 7. E.g., 100.0
textureFractions       struct       Grid average surface texture fractions for bare soil.
\                      \            These should sum to 1.0. Fields are  "fine", "coarse", "gravel", "crust".
thresholdSpeed         struct       Wind threshold for aeolian entrainment for each texture (m/s).
\                      \            Fields are  "fine", "coarse", "gravel", "crust".
\                      \            E.g. see Webb et al., 2016; Bergametti and Gillette, 2010.
**mounds**             \            **Mounds submodel configuration:**
number                 scalar       Number of mounds; set to 0 for "mound-free" scenario.
\                      \            If zero, all other mounds parameters are ignored.
geometry               scalar       Mound geometry: 0 = no mounds, 1 = generic, 2 = flat-top, 3 = cone.
imc                    1x2 matrix   Initial on-mound plant coverage fractions; e.g., ``[0.0, 0.10]``
iomc                   scalar       Initial off-mound plant coverage fraction.
radii                  1x2 matrix   Growth radii (m): distance <= radii(1) is "on mound"; >= radii(2) is "off mound".
\                      \            Example: ``[2.5, 6]``. Additional intermediate radii can be specified.
\                      \            See " `Mound Radii`_ " for details.
placement              string       Mound placement: "single", "random", "regular".
beta                   scalar       Maximum water gravity convection rate on mounds (mm d-1).
**algorithms**         \            **Turn submodels on or off (true or false):**
NAtmDep                scalar       boolean: N atmospheric deposition( daily total wet + dry).
aeolian                scalar       boolean: Aeolian submodel.
mounds                 scalar       boolean: Mounds submodel.
====================== ===========  ========================================================================================


Initial state settings
````````````````````````

(TODO: Initial state settings; biomass)


Aeolian Submodel
`````````````````

The aeolian submodel estimates effects upon plants by erosion and deposition
of aeolian transport of soil. The intent is to not track actual amounts of
material transported across a grid, rather track the effects of erosion and
deposition upon plant growth and mortality. The submodel build grids of
locations that will experience deposition or erosion. The relative magnitude
of deposition or erosion will be indicated by a fraction in the range 0-1,
where 0 is none, and 1 is maximum. These erosion and deposition effects are
applied to mortality of grass and young shrubs.

Details of the aeolian algorithms are in the document *aeolian/AeolianEffect-Algorithms*.

The aeolian submodel is enabled with the configuration item ``model.algorithms.aeolian``.


Mounds
``````

Mounds are circular topographic features of specified shape and size.
Surface water flows down the mounds according to their shape and the
parameter ``model.mounds.beta``, or maximum gravity convection rate.

The mounds submodel is enabled with the configuration item
``model.algorithms.mounds``.

Configuration items specify the number of mounds wanted and their placement,
mound geometry, the plant initial coverage, the radii for on and off mound
growth.

If the number of mounds is at least one, then two simulations are run, each
with one of the values of configuration item ``model.mounds.imc``.

Grid initialization with mounds must use
``model.initial.plantDistribution`` = 1 (uniform random values).
Other options will not initialize the mounds correctly.

With a mounds simulation, two simulations are run.
If initial biomass is configured to be "random", the first uses initial
on-mound plant coverage fraction ``model.mounds.imc(1)``, and the second
uses ``model.mounds.imc(2)``.
Both use ``model.mounds.iomc`` for off-mounds random biomass initialization.
The results of each simulation are stored separately.
Both simulations use the same initial state for state variables and mounds.
The initial biomass distribution is
uniform random, with the initial grid for both simulations.

Currently, only one plant species should be specified in the configuration
when running mounds.

Several model parameters are modified on mounds; these are related to water
flow and infiltration and plant soil water uptake.
The modified parameters are::

model.params.alpha:
    Proportion of surface water available for infiltration (d-1).

plant(1).k2:
    Rate at which infiltration increases with plant biomass (g m-2).

plant(1).c:
    Rate of water uptake by plants to plant growth (g m-2 mm-1).

plant(1).gmax:
    Plant water uptake: maximum specific water uptake (mm g-1 m-2 d-1).

The *R* script provided in the model source files at
``doc/mounds/plotModifyFactors.R`` displays graphs showing how
each parameter can change on mounds versus off of mounds.
The *R* command is:

.. code:: R

    source("<path to Drylands2 files>/doc/mounds/plotModifyFactors.R");


Mound Shape
~~~~~~~~~~~~~

Mound shape is determined by a set of [x,y] pairs in two vectors, the slope
(or convection velocity) and the radial distance from the mound center.

You can plot the one-sided velocity (slope) profile for each geometry, and the
mound topographic profile using the script provided in the model source
files at ``doc/mounds/plotMoundShapes.m``. The *GNU Octave* command is:

.. code:: MATLAB

    source('<path to Drylands2 files>/doc/mounds/plotMoundShapes.m');


Number of Mounds
~~~~~~~~~~~~~~~~~~

The number of mounds is specified in the configuration parameter
``model.mounds.number``. This may be associated with
the initial amount of fine or coarse arrangement of plants.

This is the maximum number of mounds to be created. The actual number
depends upon the placement method, the grid dimensions, and the mound's
radius.


Mound Placement
~~~~~~~~~~~~~~~~~~

single:
    Ignores the number of mounds requested, and centers one mound within the
    grid.

random:
    The number of mounds requested are distributed randomly around the grid,
    spaced so they are no closer than the radius provided. The actual number
    of cells with mounds sited can be less than the number requested if the
    spacing prohibits all cells to be sited.

regular:
    The number of mounds requested are distributed as a function of the sine
    and cosine of a fraction of the grid dimension, with at least the radius
    distance between. The actual number of cells with mounds sited can be
    less than the number requested if the spacing prohibits all cells to be
    sited.

See the appendix " `Examples of mound placement`_ "
for examples of grid masks generated for each placement type.

The convection on mounds cannot effectively handle overlapping mounds.
Results will be invalid if the mounds are overlapping and convection is on
(``model.mounds.beta`` > 0). The random mound generation algorithm will try
to keep mound centers at least 8 meters apart.


Mound Radii
~~~~~~~~~~~~

The configuration for mounds specifies at least two mound radii (m)
(``model.mounds.radii``):
Radius(1) bounds the area of "on mound" growth at the top of the mound.
Radius(end) delimits the start of "off mound" growth, is considered the
limit of the mound topography.

Intermediate radii delimit zones within which state variables are tracked,
and should only be used if the mound radius is at least 2.5 cells.

For multiple mounds, "random" and "regular" placement will keep at least
one grid cell (1 m) between mounds, and between the mounds and the
edges of the grid.
For example, if the mound radius == 1 m, then the mound centers will
have at least 3 m (3 grid cells) separation.


Mound coverage fractions
~~~~~~~~~~~~~~~~~~~~~~~~

The configuration for mounds specifies two fields for
the initial mound biomass (called "coverage" here).
These are used when the biomass initialization is "random",
but are ignored for other initialization types.

imc:
    is the initial on-mound plant biomass fractions as a vector
    of two values.
    ``imc(1)`` == biomass fraction on a mound for an "on mound" simulation.
    ``imc(2)`` == biomass fraction on a mound for an "off mound" simulation.

iomc:
    Initial off-mound biomass coverage fraction.



Examples of parameterization
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

For example, to run without convective motion of H20 due to gravity, but
with modestly reduced permeability on mounds, the configuration parameters
might be::

    model.params.alpha = 0.8
    sweep.runType = 1
    model.mounds.beta= 0.0

To run sweeps with “slow” convective motion of H20 due to gravity, and with
modestly increased plant “efficiency” on mound, try::

  model.params.c = 1.2
  sweep.runType = 1
  model.mounds.beta = 0.01



Sweeps
--------

A sweep is a set of simulations over a range of a configuration parameter.
The parameter varies with a fixed interval.
There are specific parameters from which to choose, and plant-specific
parameters currently apply only to the first plant species defined.
Plant-specific parameters are **k2**, **c**, **gmax**.

All sweep simulations use the same initial values for state variables.

The configuration item **sweep** contains an array of parameters which
specify the sweep configuration.

====================== ========== ====================================================================================
Configuration Item     Data Type  Description
====================== ========== ====================================================================================
runType                scalar     0 = sweep over range of values; 1 = single simulation (no sweep).
\                      \          If 1, the other sweep parameters are ignored.
parameter              scalar     The parameter to vary: 1 = **alpha**, 2 = **k2**, 3 = **c**,
\                      \          4 = **gmax**, 5 = rainfall, 6 = mound water convection rate (**beta**)
range                  1x2 matrix The minimum and maximum values for the sweep parameter.
\                      \          The units must be appropriate for the parameter.
sweepSize              scalar     The number of values within range, inclusive; a positive integer.
====================== ========== ====================================================================================


Trials
-------

Trials are multiple simulations with fixed configuration parameters
and one random input or parameter.
This is only useful if the initial conditions vary randomly.
Currently, the configuration item **model.initial.plantDistribution**
can be set to "random". The results are the average of the simulations.

All simulations in trials use the same initial values for state variables.

The configuration item **trials** contains parameters which
specify the trials configuration.

====================== ========== ====================================================================================
Configuration Item     Data Type  Description
====================== ========== ====================================================================================
number                 scalar     Zero or 1 for no trial simulations; number > 1 is the number of simulations.
====================== ========== ====================================================================================


Log File
---------

The configuration item **log** contains fields specifying how the log file
is used. If item **makeLog** is *false*, the other items are ignored.

========================= ========= ====================================================================================
Configuration Item        Data Type Description
========================= ========= ====================================================================================
makeLog                   logical   If true, create a log file.
debug                     logical   If true, turn on debugging messages.
info                      logical   If true, turn on informational messages.
warn                      logical   If true, turn on warning messages.
error                     logical   If true, turn on error messages.
========================= ========= ====================================================================================



Running a Drylands2 Simulation
===============================

The steps to running a simulation are:

1. Obtain the input data
2. Create a configuration file
3. Run the simulation
4. Examine the results.



Input Data
----------

Data for the model is daily precipitation, temperature,
N atmospheric deposition, and wind data.
Each can be sourced from a data file, or be a constant value.
The configuration section **input** (see " `Input Data Configuration`_ ")
contains the data file names or values.

Data files have a specific format:
Each is a text file in CSV format with date variables common to all data types,
and data variables specific to the data type.

Date variables that are shared among data files are described in the following
table. All date variables are integers and positive values.

============== =================================================================================
``year``       Year number, in ascending order.
``month``      Month number in the range 1-12, in increasing order for the year.
``day``        Day of month number, in the range 1-31, in increasing order for the month.
``dayNumber``  Sequential day number of each calendar, increasing from 1 = Jan 1 of first year.
\              The value for the first day of 2nd year is 365 (or 366) + 1.
\              Unlike the dayOfYear, dayNumber is always incremented with each day.
\              If there is a gap in the date sequence, subsequent values includes the gap days.
``dayOfYear``  The sequential day number within the year beginning with one.
\              At the start of each year the sequence is restarted at one.
============== =================================================================================


Precipitation Data File
```````````````````````

Precipitation records can be continuous or for days when precipitation
events occurred, i.e., daily precipitation is greater than zero.
Excluding records with zero or near zero precipitation can greatly reduce
the file size. If found, these records are omitted from the available data.

Columns in the CSV file are:

|    ``year, month, day, dayNumber, dayOfYear, precip``

The data variable ``precip`` is daily precipitation in mm. This can be a
fractional value.

Example snippet of a precipitation data file::

    "year","month","day","dayNumber","dayOfYear","precip"
    1980,1,11,11,11,1.524
    1980,1,14,14,14,0.508
    1980,1,21,21,21,9.652

This configuration parameter specifies the precipitation data file name:

| **input.precipitation**

Precipitation data is accessed using the class **Precip**.
The model function ``getPrecip`` retrieves the data for each day.



Temperature Data File
`````````````````````

Temperature records are expected to be continuous and without gaps for
the duration of the simulation.

Columns in the CSV file are:

|    ``year, month, day, dayNumber, dayOfYear, Tmin, Tmax, Tavg``

The data variables are daily minimum, daily maximum, and daily mean,
respectively, in degrees Celcius.

Example snippet of a temperature data file::

    "year","month","day","dayNumber","dayOfYear","Tmin","Tmax","Tavg"
    2013,8,6,218,218,24.38,34.27,30.74
    2013,8,7,219,219,19.58,32.84,25.03
    2013,8,8,220,220,15.4,35.38,25.79

This configuration item specifies the temperature data file name: **input.temperature**

Temperature data is accessed using the class **Temperature**.
The model function ``getTemperature`` retrieves the data for each day.


Nitrogen Atmospheric Deposition
```````````````````````````````

N atmospheric deposition is an input flux contributing to plant uptake of N
for growth, with decomposition of plant material returning N to the soil.
This flux does not include aeolian deposition.
Three configuration parameters control N fluxes:

**input.NAtmDep**

    Daily total wet + dry N atmospheric deposition.
    This can be file name of a data file, or a constant value (g/m2/day).

**plant.CN**

    Average aboveground and belowground C:N of biomass for this plant.

**plant.cNmax**

    Maximum daily N uptake rate as fraction of plant biomass; valid range = 0-1.
    Assume ``cNmax = (c*gmax)/C:N``.
    Units = gN gC-1 d-1.

A data file contains daily N deposition data in CSV format.
Columns in the CSV file are:

|    ``year, month, day, dayNumber, dayOfYear, Ndep``

Units of ``Ndep`` are g/m2/day.

Example snippet of a data file::

    "year","month","day","dayNumber","dayOfYear","Ndep"
    2013,8,6,218,218,0.2
    2013,8,7,219,219,0.1
    2013,8,8,220,220,0.3

N atmospheric deposition data is accessed using the class **NAtmDep**.
The model function ``getNAtmDep`` retrieves the data for each day.

The N atmospheric deposition submodel is enabled with the
configuration item **model.algorithms.NAtmDep**.


Wind Data File
```````````````

The aeolian submodel requires wind direction and maximum speed.

A data file for wind contains daily date values, wind direction and speed,
stored in a CSV file.
Wind variables used by the aeolian submodel are ``windDir`` and ``wsMax``.

Columns in the CSV file are::

    year       - integer: 1-4-digit year
    month      - integer: 1-2 digit month number (range: 1-12)
    day        - integer: 1-2 digit day of month (range: 1-31)
    dayOfYear  - integer: 1-3 digit day number within year (range: 1-366)
    windDir    - floating point: daily average wind direction (degrees clockwise from N)
    wsMean     - floating point: mean daily wind speed (m/2) at 75 cm height
    wsMax      - floating point: maximum daily wind speed (m/2) at 75 cm height

This configuration item specifies the wind data file name: **input.wind**

Wind data data is accessed using the class **WindData**.
The model function ``getWind`` retrieves the data for each day.



Running a Simulation
--------------------

A simulation can be run either from the *GNU Octave* application[3_], or from
a console command line.

Run the model with the following command:

.. code:: MATLAB

    Drylands2( configFileName, quiet=false );

where *configFileName* is a string containing the path and file name
of the configuration file (e.g., ``simulations/config.json``).
If *configFileName* is empty, then help information is displayed.
If argument ``quiet`` is ``true``, then most non-error messages are not displayed.

The model returns zero (``false``) if successful, or 1 (``true``)
if errors were encountered.

In the *GNU Octave* application's **Command Window**:

.. code:: MATLAB

    addpath('[Drylands2 installation path]/src');
    configFileName = 'path and name of your configuration file';
    Drylands2( configFileName )

From a console or shell prompt, assuming the *GNU Octave*
executable directory is in your executable search path:

.. code::

    cd <directory containing your configuration file>
    octave <path to model>/src/tools/runsim.m [configuration file]
    # Example:  octave ~/models/Drylands2/src/tools/runsim.m config.json

If running additional simulations in the same *GNU Octave* session,
enter the command ``clear all`` before starting the next simulation.



Examining Simulation Results
----------------------------

Output files include ``simulation.log``,
which contains a concise summary of the simulation configuration,
and ``Results.mat``
which contains the final matrices of state variables in **results**,
and the structures **State**, **cfg**, and **modelFiles**.

Additional output files can be generated according to the configuration.
See " `Graphs Configuration`_ " for optional graphical output.

See the section " `Model Utilities`_ " for scripts to graph time series results.


Graphs and Maps
````````````````

(TODO: Graphs and Maps)


Time Series Files
``````````````````

A time series file of scalar values is generated when the configuration item
**output.gridAvgTimeSeries** is set to *true*.
The file is named ``timeseries-stateVars.csv`` and is stored
in the output path.

The file format is CSV, or comma-separated values.
The content has the column *time* and one data column for each species.

Any of the usual office suite spreadsheet applications will open a CSV file.
You can read these files into *GNU Octave*[3_] using **csvread** from the
**io** package, or **dataframe** from from the **dataframe** package.

These R scripts (found in the directory ``src/tools``)
will read this time series data:
``plotTimeSeries.R``, and ``plotCompareTimeSeries.R``.
Each script file also has a "<name>.help" function which shows a brief
description of running the script.

E.g., in the R console:

.. code:: R

    source( '<path to Drylands2>/src/tools/plotTimeSeries.R' )
    plotTimeSeries.help()


Map Time Series Files
``````````````````````

The configuration options in item **output.mapTS** can be set to generate an
output file of biomass, resources, or spatial changes grids as an annual
time series. The output is generated annually on the day of the year
specified by the configuration for the **biomass**, **resources**, and
**spatialChanges** items.

The netCDF[6_] file is structured approximately according to standard CF
conventions. Global variables are "time", and the grid coordinates "x" and
"y". The biomass map time series for each species is in a group named as the
species (e.g., "black_grama"). Biomass is a variable "biomass" in that
group. Likewise, the resource map time series is in a group named for the
resource (e.g., "water"). Each soil layer is a variable in that group:
"top", "middle", "deep".

You can view the grids using a netCDF file viewer that understands
CF conventions and netCDF4 groups.
Some GIS applications will access and display this data, such as
*GNU Octave*[3_], *R*, *QGIS*, and *MATLAB* can be used to extract data grids.

*GNU Octave* scripts are included in the model source code that read data from
these netCDF files and generate maps (in the directory ``src/tools``).
See " `Model Utilities`_ " for descriptions of these scripts, particularly
``ncDrawMap`` and ``ncGetGrid``.

If you have the netCDF utilities installed, you can use **ncdump** to view
the structure and variables of the netCDF files. For example, to see the
file structure, use the command::

    ncdump -h timeseries-biomass-map.nc

or to extract the "time" values, enter::

    ncdump -v time timeseries-biomass-map.nc                  # header and variable
    ncdump -v time timeseries-biomass-map.nc | grep 'time ='  # If using *nix




Tools and Utilities
===================

Class SimTime
-------------

Class SimTime contains static functions for convenience when converting
between some date formats that are used in the simulation configuration.


toDate
``````

Return the year and day-of-year as a date string.

Usage: ``ds = SimTime.toDate( year, doy, dateFormat='yyyy mmm dd' )``


toDayOfYear
```````````

Return the day of the year given the date as
year, month number, and day of the month.

Usage: ``doy = SimTime.toDayOfYear( year, month, day )``


numberOfDays
````````````

Calculates the number of dates between to dates, where
dates are pairs of *year* and *day-of-year*.

Usage: ``dayCount = SimTime.numberOfDays( startYear, startDOY, endYear, endDOY )``



DailyPrecipForSite
-------------------

*GNU Octave* program to extract daily precipitation for a JER vegetation zone
and site code, and save in a CSV file.

Output columns are: ``year``, ``month``, ``day``, ``dayNumber``,
``dayOfYear``, ``precip``. where ``year``, ``month``, ``day`` are integers,
``dayNumber`` is the number of days from the start of the data, and
``dayOfYear`` is the number of the day from the start of the year.


ExtractDailyTemp
-----------------

*GNU Octave* program to extract date and temperatures from daily
meteorological summary data files for a JER site, and save in CSV format.
Missing values are replaced with simple gap-filling algorithms.

Input columns are: ``date``, ``Tavg``, ``Tmin``, ``Tmax`` (the actual names may vary).
Output file is named ``DailyTemp-SITE.csv``  where *SITE* is replaced with
the name of the site (e.g., ``C-SAND``).


Model Utilities
----------------

The following scripts are available from the
``[installation-path]/src/tools`` directory,
where ``[installation-path]`` is the directory in which the
model source code is installed.

To run a script, either

.. code::

    cd [installation-path]/src/tools

before running them,
or prefix your command with

.. code::

    [installation-path]/src/tools

or in the *GNU Octave* console, enter

.. code:: MATLAB

    addpath('[installation-path]/src/tools')


runsim
````````

*GNU Octave* script to run a Drylands2 model simulation using the
configuration file specified as the first command-line argument.
See " `Running a Simulation`_ " for further instructions.


info
`````

*GNU Octave* script to display information about the Drylands2 model.

Usage:  ``octave [installation-path]/src/tools/info.m``


plotTimeSeries.R
````````````````

*R* script to plot a time series CSV file.

The R commands to view help on using is:

.. code:: R

    source("[installation-path]/src/tools/plotTimeSeries.R")
    plotTimeSeries.help()


plotCompareTimeSeries.R
```````````````````````

*R* script to graphically compare two time series.

The R commands to view help on using is:

.. code:: R

    source("[installation-path]/src/tools/plotCompareTimeSeries.R")
    plotCompareTimeSeries.help()


ncDrawMap
``````````

*GNU Octave* script to make a map image from a grid in a netCDF file produced by
``NcBiomassTimeSeries`` or ``NcResourceTimeSeries`` during a simulation.
Uses the Octave package **netcdf**, and functions in the source files
``ncCommon.m`` and ``ncGetGrid.m``.
The configuration items **mapTS.biomass** and/or **mapTS.resources**
must be set to ``true`` to produce the netCDF time series files
during a simulation.

To view help:

.. code:: MATLAB

    addpath('[installation-path]/src/tools')
    help ncDrawMap


ncGetGrid
``````````

*GNU Octave* script to get a grid for a species at a time, from a netCDF file
produced by ``NcBiomassTimeSeries`` or ``NcResourceTimeSeries``
during a simulation.
Returns a 2D matrix.
Uses the *GNU Octave* package **netcdf**, and functions in the source file
``ncCommon.m``.

To view help:

.. code:: MATLAB

    addpath('[installation-path]/src/tools')
    help ncGetGrid



Citations
==========

.. _1:

   [1] JSON configuration file format; see
   https://www.w3schools.com/js/js_json_intro.asp

.. _2:

   [2] reStructuredText reference; see
   https://docutils.sourceforge.io/docs/ref/rst/restructuredtext.html

.. _3:

   [3] GNU Octave
   https://octave.org/

.. _4:

   [4] Rietkerk, M., F. van den Bosch, and J. van de Koppel. 1997. Site-specific
   properties and irreversible vegetation changes in semi-arid grazing systems.
   Oikos 80: 241–252.

.. _5:

   [5] Rietkerk, M., M. C. Boerlijsr, F. van Langevelde, R. Hille-RisLambers, J. Van de
   Koppel, L. Kumar, and A. M. de Roos. 2002. Self- organization of vegetation in
   arid ecosystems. American Naturalist 160:524–530. https://doi.org/10.1086/342078

.. _6:

   [6] netCDF library: https://www.unidata.ucar.edu/software/netcdf/

.. _7:

   [7] OpenDocument Format for Office Applications; see
   https://en.wikipedia.org/wiki/OpenDocument/



See Also
==========

*Manual.pdf*, source: *Manual.rst*

*ModelDiagram.pdf*, source: *ModelDiagram.fodt*

*ModelEquations.pdf*, source: *ModelEquations.fodt*

*aeolian/AeolianEffect-Algorithms.pdf*, source: *aeolian/AeolianEffect-Algorithms.rst*



Document History
=================

===================  ===================  ==========================================================
Revision Date        Model Version        Description
===================  ===================  ==========================================================
2024.10.07           4.3.0                Author: Thomas E. Hilinski <hilinski@nmsu.edu>
2024.11.14           4.5, 4.6             Misc. updates and editing. Soil N initialization.
2024.12.02           5.0                  Added calculation of N maintenance uptake.
\                    \                    New matrix time series output option for spatial changes.
2025.08.26           6.0                  New description of aeolian submodel for effects upon
\                    \                    plant mortality due to aeolian erosion and deposition
\                    \                    in section `Aeolian Submodel`_.
\                    \                    Improved the mounds submodel description.
2025.10.03           6.2                  Add Introduction section `Conventions`_.
\                    \                    Expand information in `Map Time Series Files`_.
2025.10.14           6.4                  Expanded information describing mounds.
===================  ===================  ==========================================================



Appendices
==========

Examples of mound placement
---------------------------

The following examples use the function ``buildMoundsVer1`` located in the
source directory ``mounds``::

    addpath('[Drylands2 model path]/src/mounds');

In the **mask** matrices, the mounds are specified by square groups of
``1`` values, and no-mound areas are zeros.


Placement "random"
```````````````````

.. code:: MATLAB

    placement='random'; numberOfMounds=10; radius=1.5; dSize = 20; n = 21; dx = 1;
    [indices, numberOfMounds, mask] = buildMoundsVer1(placement, numberOfMounds, radius, dSize, n, dx);
    % for display of mask, replace '0' with dots
    maskStr = num2str(mask); i = find( maskStr == '0' ); maskStr(i) = '.'   % view mounds easily

    indices =
       6   8
      17   8
      12   9
       5  12
      17  12
      12  13
       8  15
      16  17
    numberOfMounds = 8
    maskStr =
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  1  1  1  .  .  .  .  .  .  .  .  1  1  1  .  .  .
      .  .  .  .  1  1  1  .  .  .  1  1  1  .  .  1  1  1  .  .  .
      .  .  .  .  1  1  1  .  .  .  1  1  1  .  .  1  1  1  .  .  .
      .  .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .  .  .  .  .
      .  .  .  1  1  1  .  .  .  .  .  .  .  .  .  1  1  1  .  .  .
      .  .  .  1  1  1  .  .  .  .  1  1  1  .  .  1  1  1  .  .  .
      .  .  .  1  1  1  .  .  .  .  1  1  1  .  .  1  1  1  .  .  .
      .  .  .  .  .  .  1  1  1  .  1  1  1  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  1  1  1  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  1  1  1  .  .  .  .  .  1  1  1  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .


Placement "regular"
```````````````````
.. code:: MATLAB

    placement='regular'; numberOfMounds=10; radius=1.5; dSize = 20; n = 21; dx = 1;
    [indices, numberOfMounds, mask] = buildMoundsVer1(placement, numberOfMounds, radius, dSize, n, dx);
    % for display of mask, replace '0' with dots
    maskStr = num2str(mask); i = find( maskStr == '0' ); maskStr(i) = '.'   % view mounds easily

    indices =
      11   11
      15   16
      17    9
      11    5
       7    6
       5   13
      11   17
    numberOfMounds = 7
    maskStr =
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  1  1  1  .  1  1  1  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  1  1  1  .  1  1  1  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  1  1  1  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  1  1  1  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  1  1  1  .  .  .
      .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  1  1  1  .  .  .
      .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .  .  .  .  .  .
      .  .  .  1  1  1  .  .  .  1  1  1  .  .  .  .  .  .  .  .  .
      .  .  .  1  1  1  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  1  1  1  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  1  1  1  .  1  1  1  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  1  1  1  .  1  1  1  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .


Placement "single"
```````````````````
.. code:: MATLAB

    placement='single'; numberOfMounds=10; radius=1.5; dSize = 20; n = 21; dx = 1;
    [indices, numberOfMounds, mask] = buildMoundsVer1(placement, numberOfMounds, radius, dSize, n, dx);
    % for display of mask, replace '0' with dots
    maskStr = num2str(mask); i = find( maskStr == '0' ); maskStr(i) = '.'   % view mounds easily

    indices =
     11 11
    numberOfMounds = 1
    maskStr =
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  1  1  1  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .
      .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .  .




File Formats
------------

Several file formats are used with this model.
All are text files.

===================  ==========================================================
File name extension  Format
===================  ==========================================================
``txt``              Plain text file; the content may either be a document, or
\                    be for a specific application (e.g., **plantuml**).
``json``             Contains JSON[1_] stuctured data for configuration files.
\                    This contains a non-standard feature: line comments.
``csv``              Comma-Separated Values - data in text format.
``mat``              GNU Octave/MATLAB data file; may be binary or text.
``m``                GNU Octave/MATLAB source code file.
``md``               Markdown document source file.
``rst``              reStructuredText[2_] document source file.
``R``                R script file.
``fodt``             OpenDocument document file (in XML format)[7_].
\                    This is a LibreOffice native format, and is
\                    editable by Microsoft Word and Google Docs and other apps.
``fodg``             OpenDocument drawing file (in XML format)[7_].
===================  ==========================================================

Other files:

===================  ==========================================================
File name            Format
===================  ==========================================================
``style.css``        A CSS style sheet for generated documents.
``makefile``         Builds other files from the source files using ``make``
``.gitignore``       A *hidden* file that tells ``git`` to ignore some files.
===================  ==========================================================



Example Configuration File
--------------------------

Below is an example of a configuration file.
Additional configuration files (``*.json``) are provided in the
**tests** subdirectory of the model files.


.. code:: JSON

    # Drylands2 Model Configuration
    #
    # This is a JSON format file with comment lines (non-standard).
    # To read this in GNU Octave:
    #   cfg = readConfigJSON( 'config.json' );
    # -----------------------------------------------------------------------------
    {
      #
      # About this simulation
      #
      "about": {
        "location":  "Jornada LTER",
        "latitude":  32.61785,
        "longitude": -106.73985
      },
      #
      # number of rows and columns of the simulation grid
      #
      "grid": {
        "rows":    50,
        "columns": 50
      },
      #
      # input files and management
      #
      "input": {
        # precipitation data; file name, or a constant value (mm/day)
        "precipitation": "dailyPrecip-G-IBPE.csv",
        # daily temperature file name, or a constant value (degrees C)
        "temperature": "dailyTemp-G-IBPE-GapFilled.csv",
        # daily total wet + dry N atmospheric deposition; file name, or a constant value (g/m2/day)
        "NAtmDep": 0.2,
        # Wind data: daily speed and direction
        # Data can be in a CSV file, or as a vector of 3 constant values: dir, wsMean, wsMax
        # "wind": [ 0, 5, 18 ]
        "wind": "dailyWindSpeed.csv"
      },
      #
      # output files and management
      #
      "output": {
        # directory path in which to write output files (absolute or relative to this file)
        "path": "output",
        # Save final results to a "mat" file (true or false)
        "saveResults": true,
        # Write grid-average time series of state variables to a CSV file (true or false)
        "gridAvgTimeSeries": true,
        # Create netCDF map time series.
        # These values are boolean "false" or a positive integer in the range 1-366.
        # If false, do not create a map time series.
        # An integer specifies the day of the year to generate a map.
        #   biomass   = generate the time series grids for biomass for each species
        #   resources = generate the time series grids for each resource
        #   spatialChanges = boolean: optional; if present and true, save time series grids for
        #                    annual changes in resources and biomass in an MAT file.
        "mapTS": {
          "biomass":        244,
          "resources":      244,
          "spatialChanges": false
        }
      },
      #
      # simulation time limits
      #
      "simTime": {
        # start year and day-of-year for the simulation (integers)
        "start": [ 2000, 1 ],
        # end year and day-of-year (integers)
        "stop":  [ 2010, 365 ]
      },
      #
      # Graphs configuration
      #
      "graphs": {
        # Sweep graph: available only when sweep.runType == 0; produced after the simulation ends
        "doSweepGraph": true,
        # Maps of results; one page of biomass, soil water and soil N
        "doResultsMaps": true,
        # Schedule for maps: used if doResultsMaps == true.
        # Enter a vector of time numbers and/or strings.
        # Schedule times can be a day number (> zero && <= simTime),
        # or a string from ["first", "last", "annual", "decadal"]
        # example: ["first", 365, "last"]
        # example: [1, 100, 200, "annual"]
        "mapSchedule": [1, 30, 60, 365, "decadal", "last"],
        # Is the origin of maps at top-left? If false, is at lower-left.
        "mapOriginAtTop": false,
        # Should graphs and maps be displayed or written to a file?
        # Choices: "display" - to a window on the screen
        #          "png"     - save graph in a PNG file
        "destination": "png"
      },
      #
      # Plant species definitions
      # An array of entries, one per plant species.
      #
      # name        - Common or scientific name of plant species
      # type        - Type of plant: 1 = grass, 2 = shrub
      # rmax        - Limiting growth rate (maximum daily new biomass as fraction of current biomass); range 0-1
      # Bmax        - Maximum biomass (g/m2)
      # gmax        - Plant water uptake: maximum specific water uptake (mm g-1 m-2 d-1)
      #               Proportional to 1/(Water maintenance); from Stewart table 4, grass.
      #               Units: Rietkirk 1997 = (g g-1) d-1; Rietkirk 2002 = mm d-1 m2 g-1
      # k1          - Plant water uptake: half-saturation constant of specific plant growth and water uptake (mm)
      # c           - Plant growth: Rate of water uptake by plants to plant growth (g m-2 mm-1)
      #               Units: Rietkirk 1997 = g g-1 d-1; Rietkirk 2002 = g mm-1 m-2
      # DP          - Plant growth: diffusion: lateral dispersal and propagation (m2 d-1). Valid range is 0-1.
      # bmBgAgRatio - Ratio of belowground to aboveground biomass
      # bmBgDist    - Belowground biomass distribution; fraction into each soil layer (sum to 1.0) [ per layer ]
      # bmThreshold - Minimum biomass fraction (< 1.0) for cell to be considered vegetated
      # teff        - Parameters to gpdf for temperature effect on growth:
      #               1 = Optimum temperature for production.
      #               2 = Maximum temperature for production.
      #               3 = Spread of the bell curve.
      #               4 = Left curve shape.
      # k2          - Infiltration: Rate at which infiltration increases with specific plant density (g m-2)
      # CN          - average aboveground C:N of biomass for this plant
      # cNmax       - N: Maximum daily N uptake rate as fraction of plant biomass; valid range = 0-1.
      #               Assume cNmax = (c*gmax)/C:N; units = gN gC-1 d-1
      # maintN      - N: Nitrogen maintenance requirement (gN / g biomass / day)
      # mortality:
      #   d            - Background rate: specific loss of plant density due to mortality (fraction d-1).
      #   B0           - Water demand excess at the logistic function inflection point (range: >= 0.0).
      #   B1           - Maximum rate of change of mortality (range: >= 0.0).
      #   lengthPeriod - Number of days to track excess water demand (integer).
      # aeolianEffect:
      #   minThreshold - minimum aboveground biomass to be included in aeolian calculations (g/m2)
      "plant": [
        # plant 1
        {
          "name": "black grama",
          "type": 1,
          "rmax": 0.01,
          "Bmax": 319,
          # gmax - Rietkirk value: 0.05
          "gmax": 0.7,
          "k1":   5.0,
          # c - Rietkirk value: 10.0
          # From Stewart (2014) table 4: 3.5/0.7
          "c":    5.0,
          # DP - Rietkirk value: 0.1
          "DP":   0.01,
          "bmBgAgRatio": 1.44,
          "bmBgDist":    [ 0.133, 0.504, 0.363 ],
          "bmThreshold": 0.1,
          # for C4 grass
          "teff": [ 30.0, 45.0, 1.0, 2.5 ],
          "k2":   5.0,
          # nitrogen
          "CN": 58.0,
          "cNmax": 0.025,
          # maintenance: Stewart (2014, table 4) = 0.125 / 365 days
          "maintN": 0.000343,
          # biomass mortality
          "mortality": {
            # d: Rietkirk = 0.25; exceeds growth rate. Using Stewart value.
            "d":            0.00041,
            "B0":           10.0,
            "B1":           1.0,
            "lengthPeriod": 30
          },
          # grass-specific aeolian effects from biomass
          "aeolianEffect": {
            "minThreshold": 5.0,
            # grassEffect equation parameters
            "B": 0.12, "Bmax": 0.99, "Bz": 1000.0
          }
        }
      ],
      #
      # model configuration
      #
      "model": {
        "initial": {
          "biomass": [
            # An array of entries, one per plant species.
            # distribution = Initial plant distribution on grid:
            #   1 = random fraction, 2 = uniform constant, 3 = steady-state, 4 = N random.
            # configRandom: For 4 = N random values, contains a vector:
            #   configRandom(1) = number of random cells wanted
            #   configRandom(2) = minimum distance from the grid edge
            #   configRandom(3) = minimum distance from other cells
            # agLive = initial aboveground live biomass per cell (g/m2)
            #
            # plant 1: black grama
            {
              "distribution": 1,
              "configRandom": [50, 1, 2],
              "agLive":       10.0
            }
          ],
          # amount of precipitation (mm) for initialization
          "precipitation": 1.0,
          # plant-available N in the soil profile depth
          "soilN":         100.0
        },
        # Equation parameter values
        # some of these have been change to equivalence Stewart table 4.
        "params": {
            # Infiltration: Proportion of surface water available for infiltration (d-1)
            "alpha": 0.9,
            # Infiltration: Minimum infiltration factor in the absence of plants (unitless)
            "Wo": 0.2,
            # Soil Water: specific soil water loss due to drainage (d-1)
            "rW": 0.01,
            #  Soil Water: diffusion coefficient for soil water (m2 d-1). Valid range is 0-1.
            "DW": 0.1,
            # Surface Water: diffusion coefficient for surface water (DO in Rietkirk (2002)). Valid range is 0-1.
            "DS": 0.1,
            # Evaporation: Daily potential evaporation; an equation.
            # Provide a string containing function handle for equation in GNU Octave/MATLAB form.
            "Epot": "@(T) (0.392 * T - 0.837)^2",
            # Evaporation: Minimum daily potential evaporation under the plant canopy.
            "E0": 0.2,
            # Evaporation: Changes the relative lengths of the minimum and maximum asymptotes;
            "b": 2.72,
            # Evaporation: Displacement of the inflection point along the x-axis; smaller values shift left.
            "c": 40.0,
            # Evaporation: Slope at inflection point; proportional to the maximum change in evaporation with biomass.
            # E.g., Emr = K * (Epot - E0) / Bmax
            "Emr": 0.033
        },
        # Aeolian submodel parameters
        "aeolian": {
          #
          # Maximum daily aeolian sediment flux (g/m/day)
          # From Alvarez et al (2012), figure 8b.
          # Also see Bergametti & Gillette (2010), table 7.
          #
          "maxDailyFlux": 100.0,
          #
          # Grid average surface texture fractions (See class Surface) for bare soil
          # These should sum to 1.0.
          #
          "textureFractions": {
            "fine"   : 0.30,
            "coarse" : 0.30,
            "gravel" : 0.20,
            "crust"  : 0.20
          },
          #
          # Wind threshold for entrainment for each texture (m/s).
          # Wind speed above this allows significant saltation.
          # E.g. see Webb et al., 2016; Bergametti and Gillette, 2010.
          #
          "thresholdSpeed": {
            "fine"   : 5,
            "coarse" : 8,
            "gravel" : 15,
            "crust"  : 100
          }
        },
        # mounds configuration
        "mounds": {
            # number of mounds; set to 0 for "mound-free" scenario. If zero, all other mounds parameters are ignored.
            "number": 0,
            # mound geometry: 0 = no mounds, 1 = generic, 2 = flat-top, 3 = cone
            "geometry": 3,
            # initial mound coverage fractions
            "imc": [0.0, 0.10],
            # initial off-mound coverage fraction
            "iomc": 0.10,
            # Growth radii (m): distance <= (1) is "on mound"; >= (2) is "off mound".
            "radii": [2.5, 6],
            # mound placement: "single", "random", "regular"
            "placement": "random",
            # maximum convection rate on mounds (mm/day))
            "beta": 0.2
        },
        #
        # algorithms: false to exclude, true to run
        #
        "algorithms": {
          # daily total wet + dry N atmospheric deposition
          "NAtmDep": true,
          # Aeolian submodel
          "aeolian": true,
          # mounds submodel
          "mounds":  false,
          # competition switch: currently not used
          "competition": true,
          # evaporation switch: currently not used
          "evaporation": true,
          # infiltration switch: currently not used
          "infiltration": true,
          # WaterStress switch: currently not used
          "waterStress": true
        }
      },
      #
      # Sweeps
      #
      "sweep": {
        # run type: zero or one; 0 = sweep over range of values; 1 = single simulation
        "runType": 1,
        # if runType == 0, which parameter to vary?
        #   1 = G_alpha
        #   2 = G_k2
        #   3 = G_c
        #   4 = G_gmax
        #   5 = rainfall
        #   6 = convectionSpeed
        "parameter": 3,
        # minimum and maximum values for parameter; vector 1x2
        "range":     [1, 15],
        # number of values within range, inclusive; must be positive integer; if runType == 1, sweepSize = 1
        "sweepSize": 8
      },
      #
      # Random trials
      #
      "trials": {
        # zero or 1 for no trials; number > 1 for trials
        "number": 0
      },
      #
      # Create a log file for the simulation,
      # where   makeLog = If true, create a log file.
      #         debug   = If true, turn on debugging messages.
      #         info    = If true, turn on informational messages.
      #         warn    = If true, turn on warning messages.
      #         error   = If true, turn on error messages.
      #
      "log": {
        "makeLog": true,
        "debug":   false,
        "info":    false,
        "warn":    true,
        "error":   true
      }
    }
    # end
